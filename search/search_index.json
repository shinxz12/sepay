{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unofficial SePay SDK for Python \u00b6 SDK for SePay API read more in official docs Documentation: https://shinxz12.github.io/sepay GitHub: https://github.com/shinxz12/sepay PyPI: https://pypi.org/project/sepay/ Free software: MIT Features \u00b6 Transaction APIs. Bank Account APIs. Example \u00b6 Create your API Key here Get data: from sepay import SePay se_pay = SePay(api_key=<YOUR_API_KEY>) bank_account = se_pay.bank_account transaction = se_pay.transaction # Get transactions list with filters transaction.get_transactions(filters={ \"reference_number\": 'FT24314R7N9P'}) # Get transactions count transaction.get_count(filters={ \"reference_number\": 'FT24314R7'}) # Get transaction detail transaction.get_transaction(\"4508999\") # Get bank accounts list bank_account.get_bank_accounts(filters={ \"reference_number\": 'FT24314R7N9P'}) # Get bank accounts count bank_account.get_count(filters={ \"reference_number\": 'FT24314R7'}) # Get bank account detail bank_account.get_bank_account(\"3992\")","title":"Home"},{"location":"#unofficial-sepay-sdk-for-python","text":"SDK for SePay API read more in official docs Documentation: https://shinxz12.github.io/sepay GitHub: https://github.com/shinxz12/sepay PyPI: https://pypi.org/project/sepay/ Free software: MIT","title":"Unofficial SePay SDK for Python"},{"location":"#features","text":"Transaction APIs. Bank Account APIs.","title":"Features"},{"location":"#example","text":"Create your API Key here Get data: from sepay import SePay se_pay = SePay(api_key=<YOUR_API_KEY>) bank_account = se_pay.bank_account transaction = se_pay.transaction # Get transactions list with filters transaction.get_transactions(filters={ \"reference_number\": 'FT24314R7N9P'}) # Get transactions count transaction.get_count(filters={ \"reference_number\": 'FT24314R7'}) # Get transaction detail transaction.get_transaction(\"4508999\") # Get bank accounts list bank_account.get_bank_accounts(filters={ \"reference_number\": 'FT24314R7N9P'}) # Get bank accounts count bank_account.get_count(filters={ \"reference_number\": 'FT24314R7'}) # Get bank account detail bank_account.get_bank_account(\"3992\")","title":"Example"},{"location":"api/","text":"Top-level package for se-pay. bank_account \u00b6 BankAccountService \u00b6 get_bank_account ( self , transaction_id ) \u00b6 Returns the details of a transaction_id. Source code in sepay/bank_account.py def get_bank_account ( self , transaction_id : str ) -> BankAccount : \"\"\" Returns the details of a transaction_id. \"\"\" path = \"bankaccounts/details/ {} \" . format ( transaction_id ) data = self . _get ( path ) return self . get_object ( BankAccount , data [ \"bankaccount\" ]) get_bank_accounts ( self , filters = None ) \u00b6 Example usage: filters = { \"account_number\" : \"123456789\" , \"transaction_date_min\" : \"2023-01-01\" , \"amount_in\" : \"100.00\" } bank_accounts = bank_accounts . get_bank_accounts ( filters = filters ) Retrieve a list of bank_account. You can filter the results using the following parameters either directly as method arguments or through the filters dictionary: short_name : The name of the bank (short name) to filter accounts. last_transaction_date_min : Filter accounts with the most recent transaction date on or after this date (>=). Format: yyyy-mm-dd . last_transaction_date_max : Filter accounts with the most recent transaction date on or before this date (<=). Format: yyyy-mm-dd . since_id : Show bank accounts starting from the specified ID (>=). limit : Limit the number of bank accounts returned. Defaults to 100. accumulated_min : Filter bank accounts with a balance greater than or equal to this amount (>=). accumulated_max : Filter bank accounts with a balance less than or equal to this amount (>=). The filters dictionary can include any of the parameters listed above. You can use either individual parameters or the filters dictionary to customize your query. Source code in sepay/bank_account.py def get_bank_accounts ( self , filters : Optional [ Dict [ str , str ]] = None , ) -> List [ BankAccount ]: \"\"\" Example usage: ```python filters = { \"account_number\": \"123456789\", \"transaction_date_min\": \"2023-01-01\", \"amount_in\": \"100.00\" } bank_accounts = bank_accounts.get_bank_accounts(filters=filters) ``` Retrieve a list of bank_account. You can filter the results using the following parameters either directly as method arguments or through the `filters` dictionary: - **short_name**: The name of the bank (short name) to filter accounts. - **last_transaction_date_min**: Filter accounts with the most recent transaction date on or after this date (>=). Format: `yyyy-mm-dd`. - **last_transaction_date_max**: Filter accounts with the most recent transaction date on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show bank accounts starting from the specified ID (>=). - **limit**: Limit the number of bank accounts returned. Defaults to 100. - **accumulated_min**: Filter bank accounts with a balance greater than or equal to this amount (>=). - **accumulated_max**: Filter bank accounts with a balance less than or equal to this amount (>=). The `filters` dictionary can include any of the parameters listed above. You can use either individual parameters or the `filters` dictionary to customize your query. \"\"\" path = \"bankaccounts/list\" params = filters or {} data = self . _get ( path , params = params ) bank_accounts = data . get ( \"bankaccounts\" , []) return [ self . get_object ( BankAccount , transaction ) for transaction in bank_accounts ] get_count ( self , filters = None ) \u00b6 Example usage: filters = { \"since_id\" : \"1000\" } count = bank_account . get_count ( filters = filters ) Retrieve the count of bank_account based on the specified filters. You can filter the results using the filters dictionary, which can include the following parameters: short_name : The name of the bank, corresponding to the short name field. last_transaction_date_min : Filter accounts with the most recent transaction date on or after this date (>=). Format: yyyy-mm-dd . last_transaction_date_max : Filter accounts with the most recent transaction date on or before this date (<=). Format: yyyy-mm-dd . since_id : Show bank accounts starting from the specified ID (>=). accumulated_min : Filter bank accounts with a balance greater than or equal to this amount (>=). accumulated_max : Filter bank accounts with a balance less than or equal to this amount (<=). The filters dictionary allows you to customize your query by including any combination of the parameters listed above. Source code in sepay/bank_account.py def get_count ( self , filters : Optional [ Dict [ str , str ]] = None ) -> int : \"\"\" Example usage: ```python filters = { \"since_id\": \"1000\" } count = bank_account.get_count(filters=filters) ``` Retrieve the count of bank_account based on the specified filters. You can filter the results using the `filters` dictionary, which can include the following parameters: - **short_name**: The name of the bank, corresponding to the short name field. - **last_transaction_date_min**: Filter accounts with the most recent transaction date on or after this date (>=). Format: `yyyy-mm-dd`. - **last_transaction_date_max**: Filter accounts with the most recent transaction date on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show bank accounts starting from the specified ID (>=). - **accumulated_min**: Filter bank accounts with a balance greater than or equal to this amount (>=). - **accumulated_max**: Filter bank accounts with a balance less than or equal to this amount (<=). The `filters` dictionary allows you to customize your query by including any combination of the parameters listed above. \"\"\" path = \"bankaccounts/count\" params = filters or {} data = self . _get ( path , params = params ) return data [ \"count_bankaccounts\" ] models special \u00b6 bank_account_model \u00b6 BankAccount \u00b6 __class_vars__ special \u00b6 The names of the class variables defined on the model. __private_attributes__ special \u00b6 Metadata about the private attributes of the model. __pydantic_complete__ special \u00b6 Whether model building is completed, or if there are still undefined fields. __pydantic_custom_init__ special \u00b6 Whether the model has a custom __init__ method. __pydantic_decorators__ special \u00b6 Metadata containing the decorators defined on the model. This replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1. __pydantic_generic_metadata__ special \u00b6 Metadata for generic models; contains data used for a similar purpose to args , origin , parameters in typing-module generics. May eventually be replaced by these. __pydantic_parent_namespace__ special \u00b6 Parent namespace of the model, used for automatic rebuilding of models. __pydantic_post_init__ special \u00b6 The name of the post-init method for the model, if defined. __signature__ special \u00b6 The synthesized __init__ Signature of the model. model_computed_fields \u00b6 A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config \u00b6 Configuration for the model, should be a dictionary conforming to ConfigDict . model_fields \u00b6 Metadata about the fields defined on the model, mapping of field names to FieldInfo objects. This replaces Model.__fields__ from Pydantic V1. transaction_model \u00b6 Transaction \u00b6 __class_vars__ special \u00b6 The names of the class variables defined on the model. __private_attributes__ special \u00b6 Metadata about the private attributes of the model. __pydantic_complete__ special \u00b6 Whether model building is completed, or if there are still undefined fields. __pydantic_custom_init__ special \u00b6 Whether the model has a custom __init__ method. __pydantic_decorators__ special \u00b6 Metadata containing the decorators defined on the model. This replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1. __pydantic_generic_metadata__ special \u00b6 Metadata for generic models; contains data used for a similar purpose to args , origin , parameters in typing-module generics. May eventually be replaced by these. __pydantic_parent_namespace__ special \u00b6 Parent namespace of the model, used for automatic rebuilding of models. __pydantic_post_init__ special \u00b6 The name of the post-init method for the model, if defined. __signature__ special \u00b6 The synthesized __init__ Signature of the model. model_computed_fields \u00b6 A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config \u00b6 Configuration for the model, should be a dictionary conforming to ConfigDict . model_fields \u00b6 Metadata about the fields defined on the model, mapping of field names to FieldInfo objects. This replaces Model.__fields__ from Pydantic V1. transaction \u00b6 TransactionService \u00b6 get_count ( self , filters = None ) \u00b6 Example usage: filters = { \"account_number\" : \"123456789\" , \"transaction_date_min\" : \"2023-01-01\" , \"transaction_date_max\" : \"2023-12-31\" , \"since_id\" : \"1000\" } transaction_count = transactions . get_count ( filters = filters ) Retrieve the count of transactions based on the specified filters. You can filter the results using the filters dictionary, which can include the following parameters: account_number : The bank account number to filter transactions. transaction_date_min : Show transactions created on or after this date (>=). Format: yyyy-mm-dd . transaction_date_max : Show transactions created on or before this date (<=). Format: yyyy-mm-dd . since_id : Show transactions starting from the specified ID (>=). The filters dictionary allows you to customize your query by including any combination of the parameters listed above. Source code in sepay/transaction.py def get_count ( self , filters : Optional [ Dict [ str , str ]] = None ) -> int : \"\"\" Example usage: ```python filters = { \"account_number\": \"123456789\", \"transaction_date_min\": \"2023-01-01\", \"transaction_date_max\": \"2023-12-31\", \"since_id\": \"1000\" } transaction_count = transactions.get_count(filters=filters) ``` Retrieve the count of transactions based on the specified filters. You can filter the results using the `filters` dictionary, which can include the following parameters: - **account_number**: The bank account number to filter transactions. - **transaction_date_min**: Show transactions created on or after this date (>=). Format: `yyyy-mm-dd`. - **transaction_date_max**: Show transactions created on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show transactions starting from the specified ID (>=). The `filters` dictionary allows you to customize your query by including any combination of the parameters listed above. \"\"\" path = \"transactions/count\" params = filters or {} data = self . _get ( path , params = params ) return data [ \"count_transactions\" ] get_transaction ( self , transaction_id ) \u00b6 Returns the details of a transaction_id. Source code in sepay/transaction.py def get_transaction ( self , transaction_id : str ) -> Transaction : \"\"\" Returns the details of a transaction_id. \"\"\" path = \"transactions/details/ {} \" . format ( transaction_id ) data = self . _get ( path ) return self . get_object ( Transaction , data [ \"transaction\" ]) get_transactions ( self , filters = None ) \u00b6 Example usage: filters = { \"account_number\" : \"123456789\" , \"transaction_date_min\" : \"2023-01-01\" , \"amount_in\" : \"100.00\" } transactions = transactions . get_transactions ( filters = filters ) Retrieve a list of transactions. You can filter the results using the following parameters either directly as method arguments or through the filters dictionary: account_number : The bank account number to filter transactions. transaction_date_min : Show transactions created on or after this date (>=). Format: yyyy-mm-dd . transaction_date_max : Show transactions created on or before this date (<=). Format: yyyy-mm-dd . since_id : Show transactions starting from the specified ID (>=). limit : Limit the number of transactions returned. Maximum is 5000, default is 5000. reference_number : Retrieve transactions matching the specified reference number. amount_in : Retrieve incoming transactions that match this amount. amount_out : Retrieve outgoing transactions that match this amount. The filters dictionary can include any of the parameters listed above. You can use either individual parameters or the filters dictionary to customize your query. Source code in sepay/transaction.py def get_transactions ( self , filters : Optional [ Dict [ str , str ]] = None ) -> List [ Transaction ]: \"\"\" Example usage: ```python filters = { \"account_number\": \"123456789\", \"transaction_date_min\": \"2023-01-01\", \"amount_in\": \"100.00\" } transactions = transactions.get_transactions(filters=filters) ``` Retrieve a list of transactions. You can filter the results using the following parameters either directly as method arguments or through the `filters` dictionary: - **account_number**: The bank account number to filter transactions. - **transaction_date_min**: Show transactions created on or after this date (>=). Format: `yyyy-mm-dd`. - **transaction_date_max**: Show transactions created on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show transactions starting from the specified ID (>=). - **limit**: Limit the number of transactions returned. Maximum is 5000, default is 5000. - **reference_number**: Retrieve transactions matching the specified reference number. - **amount_in**: Retrieve incoming transactions that match this amount. - **amount_out**: Retrieve outgoing transactions that match this amount. The `filters` dictionary can include any of the parameters listed above. You can use either individual parameters or the `filters` dictionary to customize your query. \"\"\" path = \"transactions/list\" params = filters or {} data = self . _get ( path , params = params ) transactions = data . get ( \"transactions\" , []) return [ self . get_object ( Transaction , transaction ) for transaction in transactions ]","title":"Modules"},{"location":"api/#sepay.bank_account","text":"","title":"bank_account"},{"location":"api/#sepay.bank_account.BankAccountService","text":"","title":"BankAccountService"},{"location":"api/#sepay.bank_account.BankAccountService.get_bank_account","text":"Returns the details of a transaction_id. Source code in sepay/bank_account.py def get_bank_account ( self , transaction_id : str ) -> BankAccount : \"\"\" Returns the details of a transaction_id. \"\"\" path = \"bankaccounts/details/ {} \" . format ( transaction_id ) data = self . _get ( path ) return self . get_object ( BankAccount , data [ \"bankaccount\" ])","title":"get_bank_account()"},{"location":"api/#sepay.bank_account.BankAccountService.get_bank_accounts","text":"Example usage: filters = { \"account_number\" : \"123456789\" , \"transaction_date_min\" : \"2023-01-01\" , \"amount_in\" : \"100.00\" } bank_accounts = bank_accounts . get_bank_accounts ( filters = filters ) Retrieve a list of bank_account. You can filter the results using the following parameters either directly as method arguments or through the filters dictionary: short_name : The name of the bank (short name) to filter accounts. last_transaction_date_min : Filter accounts with the most recent transaction date on or after this date (>=). Format: yyyy-mm-dd . last_transaction_date_max : Filter accounts with the most recent transaction date on or before this date (<=). Format: yyyy-mm-dd . since_id : Show bank accounts starting from the specified ID (>=). limit : Limit the number of bank accounts returned. Defaults to 100. accumulated_min : Filter bank accounts with a balance greater than or equal to this amount (>=). accumulated_max : Filter bank accounts with a balance less than or equal to this amount (>=). The filters dictionary can include any of the parameters listed above. You can use either individual parameters or the filters dictionary to customize your query. Source code in sepay/bank_account.py def get_bank_accounts ( self , filters : Optional [ Dict [ str , str ]] = None , ) -> List [ BankAccount ]: \"\"\" Example usage: ```python filters = { \"account_number\": \"123456789\", \"transaction_date_min\": \"2023-01-01\", \"amount_in\": \"100.00\" } bank_accounts = bank_accounts.get_bank_accounts(filters=filters) ``` Retrieve a list of bank_account. You can filter the results using the following parameters either directly as method arguments or through the `filters` dictionary: - **short_name**: The name of the bank (short name) to filter accounts. - **last_transaction_date_min**: Filter accounts with the most recent transaction date on or after this date (>=). Format: `yyyy-mm-dd`. - **last_transaction_date_max**: Filter accounts with the most recent transaction date on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show bank accounts starting from the specified ID (>=). - **limit**: Limit the number of bank accounts returned. Defaults to 100. - **accumulated_min**: Filter bank accounts with a balance greater than or equal to this amount (>=). - **accumulated_max**: Filter bank accounts with a balance less than or equal to this amount (>=). The `filters` dictionary can include any of the parameters listed above. You can use either individual parameters or the `filters` dictionary to customize your query. \"\"\" path = \"bankaccounts/list\" params = filters or {} data = self . _get ( path , params = params ) bank_accounts = data . get ( \"bankaccounts\" , []) return [ self . get_object ( BankAccount , transaction ) for transaction in bank_accounts ]","title":"get_bank_accounts()"},{"location":"api/#sepay.bank_account.BankAccountService.get_count","text":"Example usage: filters = { \"since_id\" : \"1000\" } count = bank_account . get_count ( filters = filters ) Retrieve the count of bank_account based on the specified filters. You can filter the results using the filters dictionary, which can include the following parameters: short_name : The name of the bank, corresponding to the short name field. last_transaction_date_min : Filter accounts with the most recent transaction date on or after this date (>=). Format: yyyy-mm-dd . last_transaction_date_max : Filter accounts with the most recent transaction date on or before this date (<=). Format: yyyy-mm-dd . since_id : Show bank accounts starting from the specified ID (>=). accumulated_min : Filter bank accounts with a balance greater than or equal to this amount (>=). accumulated_max : Filter bank accounts with a balance less than or equal to this amount (<=). The filters dictionary allows you to customize your query by including any combination of the parameters listed above. Source code in sepay/bank_account.py def get_count ( self , filters : Optional [ Dict [ str , str ]] = None ) -> int : \"\"\" Example usage: ```python filters = { \"since_id\": \"1000\" } count = bank_account.get_count(filters=filters) ``` Retrieve the count of bank_account based on the specified filters. You can filter the results using the `filters` dictionary, which can include the following parameters: - **short_name**: The name of the bank, corresponding to the short name field. - **last_transaction_date_min**: Filter accounts with the most recent transaction date on or after this date (>=). Format: `yyyy-mm-dd`. - **last_transaction_date_max**: Filter accounts with the most recent transaction date on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show bank accounts starting from the specified ID (>=). - **accumulated_min**: Filter bank accounts with a balance greater than or equal to this amount (>=). - **accumulated_max**: Filter bank accounts with a balance less than or equal to this amount (<=). The `filters` dictionary allows you to customize your query by including any combination of the parameters listed above. \"\"\" path = \"bankaccounts/count\" params = filters or {} data = self . _get ( path , params = params ) return data [ \"count_bankaccounts\" ]","title":"get_count()"},{"location":"api/#sepay.models","text":"","title":"models"},{"location":"api/#sepay.models.bank_account_model","text":"","title":"bank_account_model"},{"location":"api/#sepay.models.bank_account_model.BankAccount","text":"","title":"BankAccount"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__class_vars__","text":"The names of the class variables defined on the model.","title":"__class_vars__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__private_attributes__","text":"Metadata about the private attributes of the model.","title":"__private_attributes__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__pydantic_complete__","text":"Whether model building is completed, or if there are still undefined fields.","title":"__pydantic_complete__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__pydantic_custom_init__","text":"Whether the model has a custom __init__ method.","title":"__pydantic_custom_init__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__pydantic_decorators__","text":"Metadata containing the decorators defined on the model. This replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.","title":"__pydantic_decorators__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__pydantic_generic_metadata__","text":"Metadata for generic models; contains data used for a similar purpose to args , origin , parameters in typing-module generics. May eventually be replaced by these.","title":"__pydantic_generic_metadata__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__pydantic_parent_namespace__","text":"Parent namespace of the model, used for automatic rebuilding of models.","title":"__pydantic_parent_namespace__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__pydantic_post_init__","text":"The name of the post-init method for the model, if defined.","title":"__pydantic_post_init__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.__signature__","text":"The synthesized __init__ Signature of the model.","title":"__signature__"},{"location":"api/#sepay.models.bank_account_model.BankAccount.model_computed_fields","text":"A dictionary of computed field names and their corresponding ComputedFieldInfo objects.","title":"model_computed_fields"},{"location":"api/#sepay.models.bank_account_model.BankAccount.model_config","text":"Configuration for the model, should be a dictionary conforming to ConfigDict .","title":"model_config"},{"location":"api/#sepay.models.bank_account_model.BankAccount.model_fields","text":"Metadata about the fields defined on the model, mapping of field names to FieldInfo objects. This replaces Model.__fields__ from Pydantic V1.","title":"model_fields"},{"location":"api/#sepay.models.transaction_model","text":"","title":"transaction_model"},{"location":"api/#sepay.models.transaction_model.Transaction","text":"","title":"Transaction"},{"location":"api/#sepay.models.transaction_model.Transaction.__class_vars__","text":"The names of the class variables defined on the model.","title":"__class_vars__"},{"location":"api/#sepay.models.transaction_model.Transaction.__private_attributes__","text":"Metadata about the private attributes of the model.","title":"__private_attributes__"},{"location":"api/#sepay.models.transaction_model.Transaction.__pydantic_complete__","text":"Whether model building is completed, or if there are still undefined fields.","title":"__pydantic_complete__"},{"location":"api/#sepay.models.transaction_model.Transaction.__pydantic_custom_init__","text":"Whether the model has a custom __init__ method.","title":"__pydantic_custom_init__"},{"location":"api/#sepay.models.transaction_model.Transaction.__pydantic_decorators__","text":"Metadata containing the decorators defined on the model. This replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.","title":"__pydantic_decorators__"},{"location":"api/#sepay.models.transaction_model.Transaction.__pydantic_generic_metadata__","text":"Metadata for generic models; contains data used for a similar purpose to args , origin , parameters in typing-module generics. May eventually be replaced by these.","title":"__pydantic_generic_metadata__"},{"location":"api/#sepay.models.transaction_model.Transaction.__pydantic_parent_namespace__","text":"Parent namespace of the model, used for automatic rebuilding of models.","title":"__pydantic_parent_namespace__"},{"location":"api/#sepay.models.transaction_model.Transaction.__pydantic_post_init__","text":"The name of the post-init method for the model, if defined.","title":"__pydantic_post_init__"},{"location":"api/#sepay.models.transaction_model.Transaction.__signature__","text":"The synthesized __init__ Signature of the model.","title":"__signature__"},{"location":"api/#sepay.models.transaction_model.Transaction.model_computed_fields","text":"A dictionary of computed field names and their corresponding ComputedFieldInfo objects.","title":"model_computed_fields"},{"location":"api/#sepay.models.transaction_model.Transaction.model_config","text":"Configuration for the model, should be a dictionary conforming to ConfigDict .","title":"model_config"},{"location":"api/#sepay.models.transaction_model.Transaction.model_fields","text":"Metadata about the fields defined on the model, mapping of field names to FieldInfo objects. This replaces Model.__fields__ from Pydantic V1.","title":"model_fields"},{"location":"api/#sepay.transaction","text":"","title":"transaction"},{"location":"api/#sepay.transaction.TransactionService","text":"","title":"TransactionService"},{"location":"api/#sepay.transaction.TransactionService.get_count","text":"Example usage: filters = { \"account_number\" : \"123456789\" , \"transaction_date_min\" : \"2023-01-01\" , \"transaction_date_max\" : \"2023-12-31\" , \"since_id\" : \"1000\" } transaction_count = transactions . get_count ( filters = filters ) Retrieve the count of transactions based on the specified filters. You can filter the results using the filters dictionary, which can include the following parameters: account_number : The bank account number to filter transactions. transaction_date_min : Show transactions created on or after this date (>=). Format: yyyy-mm-dd . transaction_date_max : Show transactions created on or before this date (<=). Format: yyyy-mm-dd . since_id : Show transactions starting from the specified ID (>=). The filters dictionary allows you to customize your query by including any combination of the parameters listed above. Source code in sepay/transaction.py def get_count ( self , filters : Optional [ Dict [ str , str ]] = None ) -> int : \"\"\" Example usage: ```python filters = { \"account_number\": \"123456789\", \"transaction_date_min\": \"2023-01-01\", \"transaction_date_max\": \"2023-12-31\", \"since_id\": \"1000\" } transaction_count = transactions.get_count(filters=filters) ``` Retrieve the count of transactions based on the specified filters. You can filter the results using the `filters` dictionary, which can include the following parameters: - **account_number**: The bank account number to filter transactions. - **transaction_date_min**: Show transactions created on or after this date (>=). Format: `yyyy-mm-dd`. - **transaction_date_max**: Show transactions created on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show transactions starting from the specified ID (>=). The `filters` dictionary allows you to customize your query by including any combination of the parameters listed above. \"\"\" path = \"transactions/count\" params = filters or {} data = self . _get ( path , params = params ) return data [ \"count_transactions\" ]","title":"get_count()"},{"location":"api/#sepay.transaction.TransactionService.get_transaction","text":"Returns the details of a transaction_id. Source code in sepay/transaction.py def get_transaction ( self , transaction_id : str ) -> Transaction : \"\"\" Returns the details of a transaction_id. \"\"\" path = \"transactions/details/ {} \" . format ( transaction_id ) data = self . _get ( path ) return self . get_object ( Transaction , data [ \"transaction\" ])","title":"get_transaction()"},{"location":"api/#sepay.transaction.TransactionService.get_transactions","text":"Example usage: filters = { \"account_number\" : \"123456789\" , \"transaction_date_min\" : \"2023-01-01\" , \"amount_in\" : \"100.00\" } transactions = transactions . get_transactions ( filters = filters ) Retrieve a list of transactions. You can filter the results using the following parameters either directly as method arguments or through the filters dictionary: account_number : The bank account number to filter transactions. transaction_date_min : Show transactions created on or after this date (>=). Format: yyyy-mm-dd . transaction_date_max : Show transactions created on or before this date (<=). Format: yyyy-mm-dd . since_id : Show transactions starting from the specified ID (>=). limit : Limit the number of transactions returned. Maximum is 5000, default is 5000. reference_number : Retrieve transactions matching the specified reference number. amount_in : Retrieve incoming transactions that match this amount. amount_out : Retrieve outgoing transactions that match this amount. The filters dictionary can include any of the parameters listed above. You can use either individual parameters or the filters dictionary to customize your query. Source code in sepay/transaction.py def get_transactions ( self , filters : Optional [ Dict [ str , str ]] = None ) -> List [ Transaction ]: \"\"\" Example usage: ```python filters = { \"account_number\": \"123456789\", \"transaction_date_min\": \"2023-01-01\", \"amount_in\": \"100.00\" } transactions = transactions.get_transactions(filters=filters) ``` Retrieve a list of transactions. You can filter the results using the following parameters either directly as method arguments or through the `filters` dictionary: - **account_number**: The bank account number to filter transactions. - **transaction_date_min**: Show transactions created on or after this date (>=). Format: `yyyy-mm-dd`. - **transaction_date_max**: Show transactions created on or before this date (<=). Format: `yyyy-mm-dd`. - **since_id**: Show transactions starting from the specified ID (>=). - **limit**: Limit the number of transactions returned. Maximum is 5000, default is 5000. - **reference_number**: Retrieve transactions matching the specified reference number. - **amount_in**: Retrieve incoming transactions that match this amount. - **amount_out**: Retrieve outgoing transactions that match this amount. The `filters` dictionary can include any of the parameters listed above. You can use either individual parameters or the `filters` dictionary to customize your query. \"\"\" path = \"transactions/list\" params = filters or {} data = self . _get ( path , params = params ) transactions = data . get ( \"transactions\" , []) return [ self . get_object ( Transaction , transaction ) for transaction in transactions ]","title":"get_transactions()"},{"location":"changelog/","text":"Changelog \u00b6 0.0.1 (2024-11-09) \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#001-2024-11-09","text":"First release on PyPI.","title":"0.0.1 (2024-11-09)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/shinxz12/sepay/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 sepay could always use more documentation, whether as part of the official sepay docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/shinxz12/sepay/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up sepay for local development. Fork the sepay repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/sepay.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python required versions. Check https://github.com/shinxz12/sepay/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_sepayr.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/shinxz12/sepay/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"sepay could always use more documentation, whether as part of the official sepay docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/shinxz12/sepay/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up sepay for local development. Fork the sepay repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/sepay.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python required versions. Check https://github.com/shinxz12/sepay/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_sepayr.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install sepay, run this command in your terminal: $ pip install sepay This is the preferred method to install sepay, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for sepay can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/shinxz12/sepay Or download the tarball : $ curl -OJL https://github.com/shinxz12/sepay/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install sepay, run this command in your terminal: $ pip install sepay This is the preferred method to install sepay, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for sepay can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/shinxz12/sepay Or download the tarball : $ curl -OJL https://github.com/shinxz12/sepay/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use sepay in a project import sepay","title":"Usage"},{"location":"usage/#usage","text":"To use sepay in a project import sepay","title":"Usage"}]}